version: "3"

services: 
  # Webserver for Reverse proxy
  nginx:
    image: nginx:latest
    restart: always
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "9002:9002"
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''

  # Redis session and queue management
  redis:
    restart: always
    image: redis:3.2-alpine

  #PHP Service
  nginxapp:
    image: nginx:latest
    restart: always
    volumes:
      - ./nginx/nginx-app.conf:/etc/nginx/nginx.conf:ro
      - ./app-laravel:/var/www
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''

  app:
    build: ./app-laravel/
    image: upcoretech
    restart: always
    tty: true
    environment:
      CONTAINER_ROLE: app
      SERVICE_NAME: app
      SERVICE_TAGS: dev
    working_dir: /var/www
    command: "/bin/sh -c 'composer install && /usr/local/bin/start'"
    volumes:
      - ./php/local.ini:/usr/local/etc/php/conf.d/local.ini
      - ./app-laravel:/var/www

  cron:
    build: ./app-laravel/
    image: upcoretech
    restart: always
    tty: true
    depends_on:
      - "app"
    environment:
      CONTAINER_ROLE: scheduler
      SERVICE_NAME: app
      SERVICE_TAGS: dev
    working_dir: /var/www
    command: "/bin/sh -c '/usr/local/bin/start'"
    volumes:
      - ./app-laravel:/var/www

  service:
    build: ./app-laravel/
    image: dhealth
    container_name: service-dhealth
    restart: always
    tty: true
    depends_on:
      - "app"
    environment:
      CONTAINER_ROLE: queue
      SERVICE_NAME: app
      SERVICE_TAGS: dev
    working_dir: /var/www
    command: "/bin/sh -c '/usr/local/bin/start'"
    volumes:
      - ./php/local.ini:/usr/local/etc/php/conf.d/local.ini

  nuxt:
    build: ./nuxt-adminlte/
    restart: always
    volumes:
      - ./nuxt-adminlte:/src
    command: 
      "/bin/sh -c 'npm install && npm run build && npm run start'"
  
  mysql:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: 'dhealth'
      # So you don't have to use root, but you can if you like
      MYSQL_USER: 'user'
      # You can use whatever password you like
      MYSQL_PASSWORD: 'password'
      # Password for root access
      MYSQL_ROOT_PASSWORD: 'password'
    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - '3407:3306'
    expose:
      # Opens port 3306 on the container
      - '3306'
      # Where our data will be persisted
    volumes:
      - health-data:/var/lib/mysql

volumes: 
  health-data:
